%SKELETON
{% set dataProductMajorVersion = values.identifier.split(".")[2] %}

apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: ${{ values.identifier }}
  description: ${{ values.description | dump }}
  annotations:
    gitlab.com/project-slug: ${{ values.owner + "/" + values.repo }}
    backstage.io/techdocs-ref: dir:.
  tags:
    - aws
    - cdp
    - spark
    - workload
spec:
  type: workload
  lifecycle: experimental
  owner: ${{ values.developmentGroup | dump }}
  system: ${{ values.dataproduct | dump }}
  domain: ${{ values.domain | dump }}
  mesh:
    name: ${{ values.name | dump }}
    fullyQualifiedName: ${{ values.domainName }} - ${{ values.dataproductName }} - version ${{ dataProductMajorVersion }} - ${{ values.name }}
    description: ${{ values.description | dump }}
    kind: workload
    version: ${{ values.identifier.split(".")[2] + ".0.0" }}
    infrastructureTemplateId: ${{ values.infrastructureTemplateId }}
    useCaseTemplateId: ${{ values.useCaseTemplateId }}
    dependsOn: {% if values.dependsOn | length > 0 %}{% for i in values.dependsOn %}
      - ${{ i }}{% endfor %}{% else %}[]{% endif %}
    platform: CDP on AWS
    technology: spark
    workloadType: batch
    connectionType: DataPipeline
    tags: []
    readsFrom: {% if values.readsFrom | length > 0 %}{% for i in values.readsFrom %}
      - ${{ i }}{% endfor %}{% else %}[]{% endif %}
    specific:
      cdeService: ${{ values.service }}
      cdeCluster: ${{ values.cluster }}
      jobName: ${{ values.jobName }}
      jar: s3://${{ values.bucket }}/${{ values.domain }}/${{ values.dataproduct }}/0.0.0/spark-app-0.0.0.jar
      className: com.agilelab.bigdata.workload.spark.app.SparkApp
      jobConfig:
        args: []
        dependencies: []
        driverCores: ${{ values.driverCores }}
        driverMemory: ${{ values.driverMemory }}
        executorCores: ${{ values.executorCores }}
        executorMemory: ${{ values.executorMemory }}
        numExecutors: ${{ values.numExecutors }}
        logLevel: INFO
        conf: {}
        schedule:
          {% if values.enableScheduling %}
            cronExpression: ${{ values.cronExpression }}
            startDate: ${{ values.startDate }}
            endDate: ${{ values.endDate }}
          {% else %}
            null
          {% endif %}


